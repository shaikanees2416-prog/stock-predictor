# ===============================
# Stock Price Prediction with Random Forest
# ===============================

import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# -------------------------
# 1. Function: Feature Engineering
# -------------------------
def compute_indicators(df):
    df = df.copy()

    # Moving Averages
    df['SMA_10'] = df['Close'].rolling(window=10).mean()
    df['SMA_50'] = df['Close'].rolling(window=50).mean()

    # RSI (Relative Strength Index)
    delta = df['Close'].diff(1)
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    df['RSI'] = 100 - (100 / (1 + rs))

    # MACD
    exp12 = df['Close'].ewm(span=12, adjust=False).mean()
    exp26 = df['Close'].ewm(span=26, adjust=False).mean()
    df['MACD'] = exp12 - exp26
    df['MACD_signal'] = df['MACD'].ewm(span=9, adjust=False).mean()

    # Volatility (rolling standard deviation)
    df['Volatility'] = df['Close'].rolling(window=10).std()

    # Target variable (1 = next day up, 0 = next day down)
    df['Target'] = np.where(df['Close'].shift(-1) > df['Close'], 1, 0)

    # Drop rows with NaN values
    df.dropna(inplace=True)
    return df


# -------------------------
# 2. Download Stock Data
# -------------------------
ticker = "AAPL"   # You can change this to any stock, e.g., "TSLA", "INFY.NS"
start_date = "2015-01-01"
end_date = "2024-12-31"

print(f"Downloading {ticker} data...")
data = yf.download(ticker, start=start_date, end=end_date)

# -------------------------
# 3. Apply Feature Engineering
# -------------------------
print("Engineering features...")
data = compute_indicators(data)

# -------------------------
# 4. Train/Test Split
# -------------------------
features = ['SMA_10', 'SMA_50', 'RSI', 'MACD', 'MACD_signal', 'Volatility']
X = data[features]
y = data['Target']

split_ratio = 0.8
split_index = int(len(X) * split_ratio)

X_train, X_test = X[:split_index], X[split_index:]
y_train, y_test = y[:split_index], y[split_index:]

print(f"Training size: {len(X_train)}, Testing size: {len(X_test)}")

# -------------------------
# 5. Train the Model
# -------------------------
print("Training RandomForestClassifier...")
model = RandomForestClassifier(
    n_estimators=200,
    max_depth=6,
    random_state=42
)
model.fit(X_train, y_train)
print("Training complete.")

# -------------------------
# 6. Evaluate Model
# -------------------------
y_pred = model.predict(X_test)

print("\n--- Evaluation ---")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Confusion Matrix Visualization
plt.figure(figsize=(6, 5))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues',
            xticklabels=['Down (0)', 'Up (1)'],
            yticklabels=['Down (0)', 'Up (1)'])
plt.title("Confusion Matrix")
plt.show()

# -------------------------
# 7. Feature Importance
# -------------------------
importances = pd.Series(model.feature_importances_, index=features).sort_values(ascending=False)
plt.figure(figsize=(8, 5))
sns.barplot(x=importances, y=importances.index)
plt.title("Feature Importance")
plt.show()

# -------------------------
# 8. Predict Next Day
# -------------------------
latest_data = X.iloc[[-1]]
prediction = model.predict(latest_data)[0]
print(f"\nPrediction for next day: {'Up ðŸ“ˆ' if prediction == 1 else 'Down ðŸ“‰'}")
